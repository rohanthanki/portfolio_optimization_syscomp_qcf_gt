01:13:24,273 parso.python.diff DEBUG diff parser start
01:13:24,273 parso.python.diff DEBUG line_lengths old: 1; new: 14
01:13:24,273 parso.python.diff DEBUG -> code[replace] old[1:1] new[1:14]
01:13:24,275 parso.python.diff DEBUG parse_part from 1 to 14 (to 13 in part parser)
01:13:24,275 parso.python.diff DEBUG diff parser end
01:13:24,288 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\api.py
01:13:24,332 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\base\model.py
01:13:24,502 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\tools\tools.py
01:13:24,511 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\tools\__init__.py
01:13:24,517 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\tools\data.py
01:13:24,607 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\__init__.py
01:13:24,615 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\__init__.py
01:13:24,625 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\misc.py
01:13:24,641 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\basic.py
01:13:24,655 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp.py
01:13:24,665 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp_lu.py
01:13:24,675 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_decomp_ldl.py
01:13:24,691 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp_cholesky.py
01:13:24,702 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp_qr.py
01:13:24,713 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_decomp_qz.py
01:13:24,738 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp_svd.py
01:13:24,753 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\decomp_schur.py
01:13:24,762 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_decomp_polar.py
01:13:24,773 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\matfuncs.py
01:13:24,784 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\blas.py
01:13:24,796 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\lapack.py
01:13:24,810 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\special_matrices.py
01:13:24,821 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_solvers.py
01:13:24,829 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_procrustes.py
01:13:24,837 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_sketches.py
01:13:24,844 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\linalg\_decomp_cossin.py
01:13:24,872 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\functools.py
01:13:24,883 parso.cache DEBUG pickle loaded: C:\Users\rohan\AppData\Roaming\Python\Python37\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
01:13:24,901 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\_lib\__init__.py
01:13:24,912 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\_lib\_util.py
01:13:24,934 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\__init__.py
01:13:24,937 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\__init__.pyi
01:13:24,947 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\numerictypes.py
01:13:24,951 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\numerictypes.pyi
01:13:24,962 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\_asarray.py
01:13:24,966 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\_asarray.pyi
01:13:24,984 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\types.py
01:13:24,997 parso.cache DEBUG pickle loaded: C:\Users\rohan\AppData\Roaming\Python\Python37\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
01:13:25,6 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\lib\__init__.py
01:13:25,11 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\lib\__init__.pyi
01:13:25,15 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\matrixlib\__init__.py
01:13:25,19 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\matrixlib\__init__.pyi
01:13:25,128 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\sklearn\utils\__init__.py
01:13:25,504 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\fromnumeric.py
01:13:25,511 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\core\fromnumeric.pyi
01:13:25,659 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\__init__.py
01:13:25,674 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\base.py
01:13:25,683 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\csr.py
01:13:25,691 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\csc.py
01:13:25,701 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\lil.py
01:13:25,711 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\dok.py
01:13:25,721 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\coo.py
01:13:25,731 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\dia.py
01:13:25,744 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\bsr.py
01:13:25,757 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\construct.py
01:13:25,764 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\extract.py
01:13:25,780 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\scipy\sparse\_matrix_io.py
01:13:25,800 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\sklearn\utils\validation.py
01:13:25,895 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\typing\__init__.py
01:13:25,920 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\typing\_dtype_like.py
01:13:25,946 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\typing_extensions.py
01:13:25,958 parso.cache DEBUG pickle loaded: C:\Users\rohan\AppData\Roaming\Python\Python37\site-packages\jedi\third_party\typeshed\third_party\2and3\typing_extensions.pyi
01:13:26,44 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\compat\__init__.py
01:13:26,53 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\statsmodels\compat\pandas.py
01:13:26,67 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\typing\_array_like.py
01:13:26,72 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\numpy\typing\_scalars.py
01:13:26,571 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\sklearn\preprocessing\__init__.py
01:13:28,588 parso.python.diff DEBUG diff parser start
01:13:28,588 parso.python.diff DEBUG line_lengths old: 14; new: 14
01:13:28,588 parso.python.diff DEBUG -> code[equal] old[1:13] new[1:13]
01:13:28,588 parso.python.diff DEBUG copy old[1:13] new[1:13]
01:13:28,588 parso.python.diff DEBUG -> code[replace] old[14:14] new[14:14]
01:13:28,588 parso.python.diff DEBUG parse_part from 14 to 14 (to 13 in part parser)
01:13:28,588 parso.python.diff DEBUG diff parser end
01:24:17,502 root INFO Rsquared : 0.02892635805166166
01:24:17,502 root INFO FValue : 3.365168541382485
01:24:45,137 parso.python.diff DEBUG diff parser start
01:24:45,138 parso.python.diff DEBUG line_lengths old: 14; new: 15
01:24:45,138 parso.python.diff DEBUG -> code[equal] old[1:12] new[1:12]
01:24:45,138 parso.python.diff DEBUG copy old[1:12] new[1:12]
01:24:45,138 parso.python.diff DEBUG -> code[replace] old[13:14] new[13:15]
01:24:45,139 parso.python.diff DEBUG parse_part from 13 to 15 (to 14 in part parser)
01:24:45,139 parso.python.diff DEBUG diff parser end
01:24:47,307 root INFO Rsquared : 0.028926356383989993
01:24:47,308 root INFO FValue : 3.3651684009632175
01:24:47,308 root INFO F PValue : 0.0002603439018063063
01:40:24,313 root INFO Rsquared : 0.028926356383989993
01:40:24,313 root INFO FValue : 3.3651684009632175
01:40:24,313 root INFO F PValue : 0.0002603439018063063
01:40:32,854 root INFO Rsquared : 0.028926356383989993
01:40:32,855 root INFO FValue : 3.3651684009632175
01:40:32,855 root INFO F PValue : 0.0002603439018063063
01:40:50,185 root INFO Rsquared : 0.028926356383989993
01:40:50,185 root INFO FValue : 3.3651684009632175
01:40:50,185 root INFO F PValue : 0.0002603439018063063
01:40:53,889 root INFO Rsquared : 0.028926356383989993
01:40:53,889 root INFO FValue : 3.3651684009632175
01:40:53,889 root INFO F PValue : 0.0002603439018063063
01:44:41,87 root INFO Rsquared : 0.028926356383989993
01:44:41,87 root INFO FValue : 3.3651684009632175
01:44:41,87 root INFO F PValue : 0.0002603439018063063
01:45:22,911 root INFO Rsquared : 0.028926356383989993
01:45:22,911 root INFO FValue : 3.3651684009632175
01:45:22,912 root INFO F PValue : 0.0002603439018063063
02:24:02,925 parso.python.diff DEBUG diff parser start
02:24:02,925 parso.python.diff DEBUG line_lengths old: 15; new: 1
02:24:02,933 parso.python.diff DEBUG -> code[replace] old[1:15] new[1:1]
02:24:02,933 parso.python.diff DEBUG parse_part from 1 to 1 (to 0 in part parser)
02:24:02,933 parso.python.diff DEBUG diff parser end
02:24:04,891 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\pandas\core\dtypes\__init__.py
02:24:04,932 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\pandas\core\dtypes\common.py
02:24:06,948 parso.cache DEBUG pickle loaded: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\pandas\core\tools\__init__.py
02:27:15,858 parso.python.diff DEBUG diff parser start
02:27:15,858 parso.python.diff DEBUG line_lengths old: 1; new: 2
02:27:15,858 parso.python.diff DEBUG -> code[replace] old[1:1] new[1:2]
02:27:15,858 parso.python.diff DEBUG parse_part from 1 to 2 (to 1 in part parser)
02:27:15,858 parso.python.diff DEBUG diff parser end
02:28:12,550 parso.python.diff DEBUG diff parser start
02:28:12,550 parso.python.diff DEBUG line_lengths old: 2; new: 2
02:28:12,550 parso.python.diff DEBUG -> code[replace] old[1:2] new[1:2]
02:28:12,550 parso.python.diff DEBUG parse_part from 1 to 2 (to 1 in part parser)
02:28:12,550 parso.python.diff DEBUG diff parser end
02:28:14,932 parso.python.diff DEBUG diff parser start
02:28:14,932 parso.python.diff DEBUG line_lengths old: 2; new: 2
02:28:14,932 parso.python.diff DEBUG -> code[equal] old[1:1] new[1:1]
02:28:14,932 parso.python.diff DEBUG copy old[1:1] new[1:1]
02:28:14,932 parso.python.diff DEBUG -> code[replace] old[2:2] new[2:2]
02:28:14,932 parso.python.diff DEBUG parse_part from 2 to 2 (to 1 in part parser)
02:28:14,932 parso.python.diff DEBUG diff parser end
02:29:23,532 root INFO Rsquared : 0.028926356383989993
02:29:23,532 root INFO FValue : 3.3651684009632175
02:29:23,540 root INFO F PValue : 0.0002603439018063063
02:30:10,38 root INFO Rsquared : 0.028926356383989993
02:30:10,38 root INFO FValue : 3.3651684009632175
02:30:10,46 root INFO F PValue : 0.0002603439018063063
02:30:29,866 parso.python.diff DEBUG diff parser start
02:30:29,866 parso.python.diff DEBUG line_lengths old: 2; new: 1
02:30:29,866 parso.python.diff DEBUG -> code[replace] old[1:2] new[1:1]
02:30:29,866 parso.python.diff DEBUG parse_part from 1 to 1 (to 0 in part parser)
02:30:29,866 parso.python.diff DEBUG diff parser end
13:55:30,204 parso.python.diff DEBUG diff parser start
13:55:30,204 parso.python.diff DEBUG line_lengths old: 1; new: 2
13:55:30,204 parso.python.diff DEBUG -> code[replace] old[1:1] new[1:2]
13:55:30,204 parso.python.diff DEBUG parse_part from 1 to 2 (to 1 in part parser)
13:55:30,204 parso.python.diff DEBUG diff parser end
13:57:04,949 matplotlib DEBUG matplotlib data path: C:\Users\rohan\Anaconda3\envs\quant_general\lib\site-packages\matplotlib\mpl-data
13:57:04,957 matplotlib DEBUG CONFIGDIR=C:\Users\rohan\.matplotlib
13:57:04,958 matplotlib DEBUG matplotlib version 3.4.3
13:57:04,958 matplotlib DEBUG interactive is False
13:57:04,958 matplotlib DEBUG platform is win32
13:57:04,959 matplotlib DEBUG loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'encodings.cp1252', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'msvcrt', '_winapi', 'jupyter_client', 'jupyter_client._version', 'typing', 'collections.abc', 'typing.io', 'typing.re', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'traitlets', 'traitlets.traitlets', 'ast', '_ast', 'inspect', 'dis', 'opcode', '_opcode', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.utils.decorators', 'copy', 'traitlets._version', 'jupyter_client.channels', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'logging', 'string', '_string', 'atexit', 'socket', '_socket', 'selectors', 'math', 'select', 'ssl', '_ssl', 'base64', 'struct', '_struct', 'binascii', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.windows_events', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'tempfile', 'shutil', 'fnmatch', 'posixpath', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'queue', '_queue', 'zmq', 'platform', 'zmq.libzmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_24', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'pickle', '_compat_pickle', '_pickle', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.asyncio', 'zmq._future', 'jupyter_client.channelsabc', 'jupyter_client.session', 'hmac', 'pprint', 'datetime', '_datetime', 'traitlets.config', 'traitlets.config.application', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'locale', 'traitlets.utils.text', 'textwrap', 'traitlets.log', 'zmq.eventloop', 'zmq.eventloop.ioloop', '__future__', 'tornado', 'tornado.log', 'logging.handlers', 'tornado.escape', 'html', 'html.entities', 'urllib', 'urllib.parse', 'tornado.util', 'array', 'tornado.speedups', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'calendar', 'six', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.client', 'getpass', 'jupyter_client.clientabc', 'jupyter_client.connect', 'glob', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.launcher', 'jupyter_client.manager', 'uuid', 'jupyter_client.managerabc', 'jupyter_client.provisioning', 'jupyter_client.provisioning.factory', 'entrypoints', 'zipfile', 'configparser', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.kernelspec', 'jupyter_client.multikernelmanager', 'ipykernel.kernelapp', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'IPython.core.crashhandler', 'IPython.core.ultratb', 'pydoc', 'sysconfig', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_win32', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'IPython.core.page', 'IPython.core.display', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.interactiveshell', 'pickleshare', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.patch_stdout', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso._compatibility', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'nturl2path', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'ipykernel.iostream', 'imp', 'ipykernel.control', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.compiler', 'debugpy', 'debugpy._version', 'debugpy.common', 'debugpy.common.compat', 'debugpy.common.fmt', 'debugpy.common.json', 'ipykernel.debugger', 'debugpy.server', 'debugpy._vendored', 'debugpy._vendored._util', 'debugpy._vendored.force_pydevd', '_pydevd_bundle', '_pydevd_bundle.pydevd_constants', 'encodings.ascii', 'encodings.idna', 'stringprep', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', '_pydev_imps._pydev_saved_modules', 'xmlrpc', 'xmlrpc.client', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'gzip', 'xmlrpc.server', 'http.server', 'socketserver', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', 'pkg_resources', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'win32com', 'win32api', 'pythoncom', 'pywintypes', '_win32sysloader', 'win32com.gen_py', 'win32com.shell', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pydevd', 'pydevd_file_utils', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', '_pydev_bundle.pydev_imports', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', '_pydevd_bundle.pydevd_extension_utils', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle.pydev_console_utils', '_pydev_bundle._pydev_calltip_util', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_tipper_common', '_pydevd_bundle.pydevd_vars', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_daemon_thread', 'pydevd_tracing', '_pydev_bundle.pydev_monkey', '_pydevd_bundle.pydevd_defaults', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle._pydev_completer', 'pydevconsole', '_pydev_bundle.pydev_umd', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_frame', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_plugin_utils', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'debugpy.server.api', 'debugpy.adapter', 'debugpy.common.log', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.sockets', 'ipykernel.parentpoller', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'pandas.core.computation.expressions', 'pandas.core.computation.check', 'pandas.io.formats.html', 'jedi.inference.finder', 'zmq.utils.garbage', 'jedi.inference.star_args', 'jedi.inference.dynamic_params', 'pandas.core.apply', 'dataclasses', 'sklearn', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build', 'sklearn.__check_build._check_build', 'sklearn.base', 'sklearn.utils', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy._lib._util', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'sklearn.utils.murmurhash', 'sklearn.utils.class_weight', 'sklearn.utils._joblib', 'joblib', 'joblib.memory', 'joblib.hashing', 'joblib.func_inspect', 'joblib.logger', 'joblib.disk', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', '__mp_main__', 'multiprocessing.util', 'joblib._store_backends', 'joblib.backports', 'joblib.numpy_pickle', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.parallel', 'joblib._multiprocessing_helpers', '_multiprocessing', 'joblib._parallel_backends', 'joblib.my_exceptions', 'joblib._deprecated_my_exceptions', 'joblib.pool', 'joblib._memmapping_reducer', 'joblib.externals', 'joblib.externals.loky', 'joblib.externals.loky._base', 'joblib.externals.loky.backend', 'joblib.externals.loky.backend.context', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.compat', 'joblib.externals.loky.backend.compat_win32', 'multiprocessing.popen_spawn_win32', 'multiprocessing.spawn', 'multiprocessing.connection', 'multiprocessing.synchronize', 'joblib.externals.loky.backend.reduction', 'joblib.externals.loky.backend._win_reduction', 'joblib.externals.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.compat', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.backend.queues', 'multiprocessing.queues', 'joblib.externals.loky.backend.utils', 'concurrent.futures.process', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky.backend.resource_tracker', 'joblib.externals.loky.backend.spawn', 'multiprocessing.pool', 'joblib.executor', 'sklearn.exceptions', 'sklearn.utils.deprecation', 'sklearn.utils.fixes', 'scipy.stats', 'scipy.stats.stats', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.ndimage', 'scipy.ndimage.filters', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy.ndimage._ni_docstrings', 'scipy._lib.doccer', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', 'scipy.ndimage._ni_label', '_ni_label', 'scipy.ndimage.morphology', 'scipy.stats.distributions', 'scipy.stats._distn_infrastructure', 'scipy.stats._distr_params', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate', 'scipy.integrate._quadrature', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'scipy.misc', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.stats._constants', 'scipy.stats._continuous_distns', 'scipy.interpolate', 'scipy.interpolate.interpolate', 'scipy.interpolate.fitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._bsplines', 'scipy.interpolate._bspl', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.rbf', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.stats._stats', 'scipy.special.cython_special', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._boost', 'scipy.stats._boost.beta_ufunc', 'beta_ufunc', 'scipy.stats._boost.binom_ufunc', 'binom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'nbinom_ufunc', 'scipy.stats._discrete_distns', 'scipy.stats.biasedurn', 'scipy.stats._entropy', 'scipy.stats.mstats_basic', 'scipy.stats._stats_mstats_common', 'scipy._lib._bunch', 'scipy.stats._hypotests', 'scipy.stats._wilcoxon_data', 'scipy.stats.morestats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats._relative_risk', 'scipy.stats._common', 'scipy.stats._crosstab', 'scipy.stats._binomtest', 'scipy.stats._binned_statistic', 'scipy.stats.kde', 'scipy.stats.mvn', 'scipy.stats.mstats', 'scipy.stats.mstats_extras', 'scipy.stats.qmc', 'scipy.stats._qmc', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._multivariate', 'scipy.stats._bootstrap', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'sklearn.externals', 'sklearn.externals._packaging', 'sklearn.externals._packaging.version', 'sklearn.externals._packaging._structures', 'sklearn.utils._estimator_html_repr', 'sklearn.utils.validation', 'sklearn.utils._tags', 'sklearn.utils._show_versions', 'sklearn.utils._openmp_helpers', 'sklearn.linear_model', 'sklearn.linear_model._base', 'sklearn.preprocessing', 'sklearn.preprocessing._function_transformer', 'sklearn.preprocessing._data', 'sklearn.utils.extmath', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.sparsefuncs', 'sklearn.preprocessing._encoders', 'sklearn.utils._mask', 'sklearn.utils._encode', 'sklearn.preprocessing._label', 'sklearn.utils.multiclass', 'sklearn.preprocessing._discretization', 'sklearn.preprocessing._polynomial', 'sklearn.utils.stats', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.utils._seq_dataset', 'sklearn.utils._random', 'sklearn.linear_model._bayes', 'sklearn.linear_model._least_angle', 'sklearn.utils.arrayfuncs', 'sklearn.utils._cython_blas', 'sklearn.model_selection', 'sklearn.model_selection._split', 'sklearn.model_selection._validation', 'sklearn.utils.metaestimators', 'sklearn.metrics', 'sklearn.metrics._ranking', 'sklearn.metrics._base', 'sklearn.metrics._classification', 'sklearn.metrics.cluster', 'sklearn.metrics.cluster._supervised', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.pairwise', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics._regression', 'sklearn._loss', 'sklearn._loss.glm_distribution', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.det_curve', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.model_selection._search', 'sklearn.utils.random', 'sklearn.linear_model._coordinate_descent', 'sklearn.linear_model._cd_fast', 'sklearn.linear_model._glm', 'sklearn.linear_model._glm.glm', 'sklearn.utils.optimize', 'sklearn.linear_model._glm.link', 'sklearn.linear_model._huber', 'sklearn.linear_model._sgd_fast', 'sklearn.utils._weight_vector', 'sklearn.linear_model._stochastic_gradient', 'sklearn.linear_model._ridge', 'sklearn.linear_model._sag', 'sklearn.linear_model._sag_fast', 'sklearn.linear_model._logistic', 'sklearn.svm', 'sklearn.svm._classes', 'sklearn.svm._base', 'sklearn.svm._libsvm', 'sklearn.svm._liblinear', 'sklearn.svm._libsvm_sparse', 'sklearn.svm._bounds', 'sklearn.linear_model._omp', 'sklearn.linear_model._passive_aggressive', 'sklearn.linear_model._perceptron', 'sklearn.linear_model._quantile', 'sklearn.linear_model._ransac', 'sklearn.linear_model._theil_sen', 'sklearn.utils._pprint', 'sklearn.feature_selection', 'sklearn.feature_selection._univariate_selection', 'sklearn.feature_selection._base', 'sklearn.feature_selection._variance_threshold', 'sklearn.feature_selection._rfe', 'sklearn.feature_selection._from_model', 'sklearn.feature_selection._sequential', 'sklearn.feature_selection._mutual_info', 'sklearn.neighbors', 'sklearn.neighbors._ball_tree', 'sklearn.neighbors._dist_metrics', 'sklearn.neighbors._typedefs', 'sklearn.neighbors._partition_nodes', 'sklearn.neighbors._kd_tree', 'sklearn.neighbors._graph', 'sklearn.neighbors._base', 'sklearn.neighbors._unsupervised', 'sklearn.neighbors._classification', 'sklearn.neighbors._regression', 'sklearn.neighbors._nearest_centroid', 'sklearn.neighbors._kde', 'sklearn.neighbors._lof', 'sklearn.neighbors._nca', 'sklearn.decomposition', 'sklearn.decomposition._nmf', 'sklearn.decomposition._cdnmf_fast', 'sklearn.decomposition._pca', 'sklearn.decomposition._base', 'sklearn.utils._arpack', 'sklearn.decomposition._incremental_pca', 'sklearn.decomposition._kernel_pca', 'sklearn.decomposition._sparse_pca', 'sklearn.decomposition._dict_learning', 'sklearn.decomposition._truncated_svd', 'sklearn.decomposition._fastica', 'sklearn.decomposition._factor_analysis', 'sklearn.decomposition._lda', 'sklearn.decomposition._online_lda_fast', 'statsmodels', 'statsmodels._version', 'statsmodels.api', 'statsmodels.datasets', 'statsmodels.tools', 'statsmodels.tools.tools', 'statsmodels.tools.data', 'statsmodels.tools.validation', 'statsmodels.tools.validation.validation', 'statsmodels.tools._testing', 'statsmodels.datasets.anes96', 'statsmodels.datasets.anes96.data', 'statsmodels.datasets.utils', 'statsmodels.compat', 'statsmodels.compat.python', 'statsmodels.datasets.cancer', 'statsmodels.datasets.cancer.data', 'statsmodels.datasets.ccard', 'statsmodels.datasets.ccard.data', 'statsmodels.datasets.china_smoking', 'statsmodels.datasets.china_smoking.data', 'statsmodels.datasets.co2', 'statsmodels.datasets.co2.data', 'statsmodels.datasets.committee', 'statsmodels.datasets.committee.data', 'statsmodels.datasets.copper', 'statsmodels.datasets.copper.data', 'statsmodels.datasets.cpunish', 'statsmodels.datasets.cpunish.data', 'statsmodels.datasets.danish_data', 'statsmodels.datasets.danish_data.data', 'statsmodels.datasets.elnino', 'statsmodels.datasets.elnino.data', 'statsmodels.datasets.engel', 'statsmodels.datasets.engel.data', 'statsmodels.datasets.fair', 'statsmodels.datasets.fair.data', 'statsmodels.datasets.fertility', 'statsmodels.datasets.fertility.data', 'statsmodels.datasets.grunfeld', 'statsmodels.datasets.grunfeld.data', 'statsmodels.datasets.heart', 'statsmodels.datasets.heart.data', 'statsmodels.datasets.interest_inflation', 'statsmodels.datasets.interest_inflation.data', 'statsmodels.datasets.longley', 'statsmodels.datasets.longley.data', 'statsmodels.datasets.macrodata', 'statsmodels.datasets.macrodata.data', 'statsmodels.datasets.modechoice', 'statsmodels.datasets.modechoice.data', 'statsmodels.datasets.nile', 'statsmodels.datasets.nile.data', 'statsmodels.datasets.randhie', 'statsmodels.datasets.randhie.data', 'statsmodels.datasets.scotland', 'statsmodels.datasets.scotland.data', 'statsmodels.datasets.spector', 'statsmodels.datasets.spector.data', 'statsmodels.datasets.stackloss', 'statsmodels.datasets.stackloss.data', 'statsmodels.datasets.star98', 'statsmodels.datasets.star98.data', 'statsmodels.datasets.statecrime', 'statsmodels.datasets.statecrime.data', 'statsmodels.datasets.strikes', 'statsmodels.datasets.strikes.data', 'statsmodels.datasets.sunspots', 'statsmodels.datasets.sunspots.data', 'statsmodels.distributions', 'statsmodels.distributions.empirical_distribution', 'statsmodels.distributions.edgeworth', 'statsmodels.distributions.discrete', 'statsmodels.base', 'statsmodels.base.model', 'statsmodels.base.data', 'statsmodels.tools.decorators', 'statsmodels.tools.sm_exceptions', 'statsmodels.compat.pandas', 'statsmodels.base.optimizer', 'statsmodels.base.wrapper', 'statsmodels.formula', 'statsmodels.formula.formulatools', 'patsy', 'patsy.version', 'patsy.origin', 'patsy.highlevel', 'patsy.design_info', 'patsy.util', 'patsy.compat', 'patsy.constraint', 'patsy.infix_parser', 'patsy.parse_formula', 'patsy.tokens', 'patsy.contrasts', 'patsy.desc', 'patsy.eval', 'patsy.builtins', 'patsy.categorical', 'patsy.state', 'patsy.splines', 'patsy.mgcv_cubic_splines', 'patsy.build', 'patsy.redundancy', 'patsy.missing', 'patsy.user_util', 'statsmodels.stats', 'statsmodels.stats.contrast', 'statsmodels.stats.multitest', 'statsmodels.stats._knockoff', 'statsmodels.iolib', 'statsmodels.iolib.foreign', 'statsmodels.iolib.openfile', 'statsmodels.iolib.table', 'statsmodels.iolib.smpickle', 'statsmodels.iolib.summary2', 'statsmodels.iolib.tableformatting', 'statsmodels.tools.numdiff', 'statsmodels.regression', 'statsmodels.regression.linear_model', 'statsmodels.emplike', 'statsmodels.emplike.elregress', 'statsmodels.emplike.descriptive', 'statsmodels.graphics', 'statsmodels.graphics.utils', 'statsmodels.regression._prediction', 'statsmodels.robust', 'statsmodels.robust.norms', 'statsmodels.robust.scale', 'statsmodels.robust._qn', 'statsmodels.__init__', 'statsmodels.discrete', 'statsmodels.discrete.count_model', 'statsmodels.discrete.discrete_model', 'statsmodels.base.l1_slsqp', 'statsmodels.base.l1_solvers_common', 'statsmodels.duration', 'statsmodels.duration.api', 'statsmodels.duration.hazard_regression', 'statsmodels.duration.survfunc', 'statsmodels.emplike.api', 'statsmodels.emplike.originregress', 'statsmodels.emplike.elanova', 'statsmodels.emplike.aft_el', 'statsmodels.formula.api', 'statsmodels.regression.mixed_linear_model', 'statsmodels.base._penalties', 'statsmodels.genmod', 'statsmodels.genmod.generalized_linear_model', 'statsmodels.genmod._prediction', 'statsmodels.graphics._regressionplots_doc', 'statsmodels.regression._tools', 'statsmodels.genmod.families', 'statsmodels.genmod.families.links', 'statsmodels.genmod.families.family', 'statsmodels.genmod.families.varfuncs', 'statsmodels.robust.robust_linear_model', 'statsmodels.regression.quantile_regression', 'statsmodels.genmod.generalized_estimating_equations', 'statsmodels.genmod.cov_struct', 'statsmodels.stats.correlation_tools', 'statsmodels.discrete.discrete_margins', 'statsmodels.gam', 'statsmodels.gam.generalized_additive_model', 'statsmodels.tools.linalg', 'statsmodels.base._penalized', 'statsmodels.gam.gam_penalties', 'statsmodels.gam.gam_cross_validation', 'statsmodels.gam.gam_cross_validation.gam_cross_validation', 'statsmodels.gam.smooth_basis', 'statsmodels.gam.gam_cross_validation.cross_validators', 'statsmodels.gam.api', 'statsmodels.genmod.api', 'statsmodels.genmod.bayes_mixed_glm', 'statsmodels.graphics.api', 'statsmodels.graphics.tsaplots', 'statsmodels.tsa', 'statsmodels.tsa.stattools', 'statsmodels.compat.numpy', 'statsmodels.compat.scipy', 'scipy.signal', 'scipy.signal.sigtools', 'scipy.signal.windows', 'scipy.signal.windows.windows', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.signal.waveforms', 'scipy.signal._max_len_seq', 'scipy.signal._max_len_seq_inner', 'scipy.signal._upfirdn', 'scipy.signal._upfirdn_apply', 'scipy.signal.spline', 'scipy.signal.bsplines', 'scipy.signal.filter_design', 'scipy.signal.fir_filter_design', 'scipy.signal.ltisys', 'scipy.signal.lti_conversion', 'scipy.signal.signaltools', 'scipy.signal._arraytools', 'scipy.signal._sosfilt', 'scipy.signal._savitzky_golay', 'scipy.signal.spectral', 'scipy.signal._spectral', 'scipy.signal.wavelets', 'scipy.signal._peak_finding', 'scipy.signal._peak_finding_utils', 'statsmodels.tsa._bds', 'statsmodels.tsa._innovations', 'statsmodels.tsa.adfvalues', 'statsmodels.tsa.tsatools', 'statsmodels.graphics.agreement', 'statsmodels.graphics.boxplots', 'statsmodels.graphics.correlation', 'statsmodels.graphics.factorplots', 'statsmodels.graphics.plottools', 'statsmodels.graphics.functional', 'statsmodels.multivariate', 'statsmodels.multivariate.pca', 'statsmodels.nonparametric', 'statsmodels.nonparametric.kernel_density', 'statsmodels.nonparametric.kernels', 'statsmodels.nonparametric._kernel_base', 'statsmodels.graphics.gofplots', 'statsmodels.graphics.regressionplots', 'statsmodels.nonparametric.smoothers_lowess', 'statsmodels.nonparametric._smoothers_lowess', 'statsmodels.sandbox', 'statsmodels.sandbox.regression', 'statsmodels.sandbox.regression.predstd', 'statsmodels.imputation', 'statsmodels.imputation.bayes_mi', 'statsmodels.imputation.mice', 'statsmodels.multivariate.api', 'statsmodels.multivariate.manova', 'statsmodels.multivariate.multivariate_ols', 'statsmodels.multivariate.factor', 'statsmodels.multivariate.factor_rotation', 'statsmodels.multivariate.factor_rotation._wrappers', 'statsmodels.multivariate.factor_rotation._analytic_rotation', 'statsmodels.multivariate.factor_rotation._gpa_rotation', 'statsmodels.multivariate.cancorr', 'statsmodels.nonparametric.api', 'statsmodels.nonparametric.kde', 'statsmodels.sandbox.nonparametric', 'statsmodels.sandbox.nonparametric.kernels', 'statsmodels.nonparametric.bandwidths', 'statsmodels.nonparametric.kdetools', 'statsmodels.nonparametric.linbin', 'statsmodels.nonparametric.kernel_regression', 'statsmodels.nonparametric.kernels_asymmetric', 'statsmodels.regression.recursive_ls', 'statsmodels.tsa.statespace', 'statsmodels.tsa.statespace.mlemodel', 'statsmodels.tools.eval_measures', 'statsmodels.tsa.base', 'statsmodels.tsa.base.prediction', 'statsmodels.tsa.base.tsa_model', 'statsmodels.tsa.statespace.news', 'statsmodels.iolib.summary', 'statsmodels.tsa.statespace.simulation_smoother', 'statsmodels.tsa.statespace.kalman_smoother', 'statsmodels.tsa.statespace.representation', 'statsmodels.tsa.statespace.tools', 'statsmodels.tsa.statespace._initialization', 'statsmodels.tsa.statespace._representation', 'statsmodels.tsa.statespace._tools', 'statsmodels.tsa.statespace._kalman_filter', 'statsmodels.tsa.statespace._filters', 'statsmodels.tsa.statespace._filters._conventional', 'statsmodels.tsa.statespace._filters._univariate', 'statsmodels.tsa.statespace._filters._univariate_diffuse', 'statsmodels.tsa.statespace._filters._inversions', 'statsmodels.tsa.statespace._kalman_smoother', 'statsmodels.tsa.statespace._smoothers', 'statsmodels.tsa.statespace._smoothers._conventional', 'statsmodels.tsa.statespace._smoothers._univariate', 'statsmodels.tsa.statespace._smoothers._univariate_diffuse', 'statsmodels.tsa.statespace._smoothers._classical', 'statsmodels.tsa.statespace._smoothers._alternative', 'statsmodels.tsa.statespace._simulation_smoother', 'statsmodels.tsa.statespace._cfa_simulation_smoother', 'statsmodels.tsa.statespace.initialization', 'statsmodels.tsa.statespace.kalman_filter', 'statsmodels.tsa.statespace.cfa_simulation_smoother', 'statsmodels.stats.api', 'statsmodels.stats.diagnostic', 'statsmodels.stats._lilliefors', 'statsmodels.stats._lilliefors_critical_values', 'statsmodels.stats.tabledist', 'statsmodels.stats._adnorm', 'statsmodels.stats.multicomp', 'statsmodels.sandbox.stats', 'statsmodels.sandbox.stats.multicomp', 'statsmodels.stats.gof', 'statsmodels.stats.stattools', 'statsmodels.stats.sandwich_covariance', 'statsmodels.tools.grouputils', 'statsmodels.stats.moment_helpers', 'statsmodels.stats.weightstats', 'statsmodels.stats.proportion', 'statsmodels.stats.base', 'statsmodels.tools.testing', 'statsmodels.stats.rates', 'statsmodels.stats.oneway', 'statsmodels.stats.robust_compare', 'statsmodels.stats.multivariate', 'statsmodels.stats.power', 'statsmodels.tools.rootfinding', 'statsmodels.stats.descriptivestats', 'statsmodels.tools.docstring', 'statsmodels.stats.anova', 'statsmodels.stats.inter_rater', 'statsmodels.stats.oaxaca', 'statsmodels.sandbox.stats.runs', 'statsmodels.stats.contingency_tables', 'statsmodels.stats.mediation', 'statsmodels.stats.meta_analysis', 'statsmodels.tools.print_version', 'statsmodels.tools.web', 'webbrowser', 'statsmodels.tsa.api', 'statsmodels.tsa.interp', 'statsmodels.tsa.interp.denton', 'statsmodels.tsa.vector_ar', 'statsmodels.tsa.ar_model', 'statsmodels.tsa.arima_process', 'statsmodels.tsa.deterministic', 'statsmodels.tsa.ardl', 'statsmodels.tsa.ardl.model', 'statsmodels.tsa.ardl.pss_critical_values', 'statsmodels.tsa.arima', 'statsmodels.tsa.arima.api', 'statsmodels.tsa.arima.model', 'statsmodels.tsa.statespace.sarimax', 'statsmodels.tsa.arima.specification', 'statsmodels.tsa.arima.tools', 'statsmodels.tsa.arima.params', 'statsmodels.tsa.arima.estimators', 'statsmodels.tsa.arima.estimators.yule_walker', 'statsmodels.tsa.arima.estimators.burg', 'statsmodels.tsa.arima.estimators.hannan_rissanen', 'statsmodels.tsa.arima.estimators.innovations', 'statsmodels.tsa.innovations', 'statsmodels.tsa.innovations.arma_innovations', 'statsmodels.tsa.innovations._arma_innovations', 'statsmodels.tsa.arima.estimators.gls', 'statsmodels.tsa.arima.estimators.statespace', 'statsmodels.tsa.base.datetools', 'statsmodels.tsa.exponential_smoothing', 'statsmodels.tsa.exponential_smoothing.ets', 'statsmodels.base.covtype', 'statsmodels.tsa.exponential_smoothing.base', 'statsmodels.tsa.exponential_smoothing._ets_smooth', 'statsmodels.tsa.exponential_smoothing.initialization', 'statsmodels.tsa.filters', 'statsmodels.tsa.filters.api', 'statsmodels.tsa.filters.bk_filter', 'statsmodels.tsa.filters.hp_filter', 'statsmodels.tsa.filters.cf_filter', 'statsmodels.tsa.filters.filtertools', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'statsmodels.tsa.forecasting', 'statsmodels.tsa.forecasting.stl', 'statsmodels.tsa.seasonal', 'statsmodels.tsa._stl', 'statsmodels.tsa.holtwinters', 'statsmodels.tsa.holtwinters.model', 'statsmodels.tsa.holtwinters._exponential_smoothers', 'statsmodels.tsa.holtwinters._smoothers', 'statsmodels.tsa.holtwinters.results', 'statsmodels.tsa.innovations.api', 'statsmodels.tsa.regime_switching', 'statsmodels.tsa.regime_switching.markov_autoregression', 'statsmodels.tsa.regime_switching.markov_switching', 'statsmodels.tsa.regime_switching._hamilton_filter', 'statsmodels.tsa.regime_switching._kim_smoother', 'statsmodels.tsa.regime_switching.markov_regression', 'statsmodels.tsa.statespace.api', 'statsmodels.tsa.statespace.exponential_smoothing', 'statsmodels.tsa.statespace.dynamic_factor', 'statsmodels.tsa.vector_ar.var_model', 'statsmodels.tsa.vector_ar.output', 'statsmodels.tsa.vector_ar.plotting', 'statsmodels.tsa.vector_ar.util', 'statsmodels.tsa.vector_ar.hypothesis_test_results', 'statsmodels.tsa.vector_ar.irf', 'statsmodels.tsa.statespace.dynamic_factor_mq', 'statsmodels.tsa.statespace._quarterly_ar1', 'statsmodels.tsa.statespace.structural', 'statsmodels.tsa.statespace.varmax', 'statsmodels.tsa.vector_ar.svar_model', 'statsmodels.tsa.vector_ar.vecm', 'statsmodels.tsa.coint_tables', 'statsmodels.tsa.x13', 'matplotlib', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib.cbook', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.animation', 'PIL', 'PIL._version', 'PIL.Image', 'defusedxml', 'defusedxml.common', 'defusedxml.ElementTree', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'matplotlib._animation_data', 'matplotlib.colors', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib._enums', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'matplotlib.dates', 'dateutil.rrule', 'matplotlib.units']
13:57:04,990 matplotlib DEBUG CACHEDIR=C:\Users\rohan\.matplotlib
13:57:05,0 matplotlib.font_manager DEBUG Using fontManager instance from C:\Users\rohan\.matplotlib\fontlist-v330.json
13:57:05,121 matplotlib.pyplot DEBUG Loaded backend module://matplotlib_inline.backend_inline version unknown.
13:57:05,122 matplotlib.pyplot DEBUG Loaded backend module://matplotlib_inline.backend_inline version unknown.
13:57:05,153 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
13:57:05,153 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
13:57:05,154 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
13:57:05,155 matplotlib.font_manager DEBUG findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
13:57:05,156 matplotlib.font_manager DEBUG findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
13:57:05,157 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
13:57:05,158 matplotlib.font_manager DEBUG findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
13:57:05,159 matplotlib.font_manager DEBUG findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
13:57:05,160 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
13:57:05,161 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
13:57:05,162 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
13:57:05,163 matplotlib.font_manager DEBUG findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
13:57:05,164 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
13:57:05,165 matplotlib.font_manager DEBUG findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
13:57:05,166 matplotlib.font_manager DEBUG findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
13:57:05,167 matplotlib.font_manager DEBUG findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
13:57:05,168 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\rohan\\Anaconda3\\envs\\quant_general\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
